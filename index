video_progress = {}
extract_progress = {}
# Kiểm tra ffmpeg
def is_ffmpeg_available(ffmpeg_bin):
    return shutil.which(os.path.join(ffmpeg_bin, 'ffmpeg')) is not None

def hash_video_name(input_str):
    ascii_str = input_str.encode('ascii', 'ignore').decode('ascii')
    
    # Loại bỏ các ký tự không phải chữ và số
    cleaned_str = ''.join(char for char in ascii_str if char.isalnum())
    
    return cleaned_str


# Hàm trích xuất khung hình và âm thanh
def extract_frames(video_path, interval, output_dir, progress_callback, ffmpeg_bin):
    def run(video_path):
        try:
            if not os.path.exists(output_dir):
                os.makedirs(output_dir)

            # Lấy thông tin video
            video_key = hash_video_name(os.path.basename(video_path))
            output_directory = os.path.join(output_dir, os.path.basename(video_path).split('.')[0])
            os.makedirs(output_directory, exist_ok=True)

            # Sử dụng FFmpeg để trích xuất khung hình
            output_path = os.path.join(output_directory, 'frame_%d.png')
            command_extract_frames = [
                os.path.join(ffmpeg_bin, 'ffmpeg'),
                '-i', video_path,
                '-vf', f'fps=1/{interval}',
                output_path
            ]
            subprocess.Popen(command_extract_frames, creationflags=subprocess.CREATE_NO_WINDOW, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

            # Trích xuất âm thanh từ video gốc
            audio_path = os.path.join(output_directory, "audio.wav")
            command_audio = [
                os.path.join(ffmpeg_bin, 'ffmpeg'),
                '-i', video_path,  # Đầu vào là video
                '-vn',  # Không lấy video, chỉ lấy âm thanh
                '-acodec', 'pcm_s16le',  # Chỉ định codec âm thanh (PCM 16-bit Little Endian)
                '-ar', '44100',  # Tần số lấy mẫu 44.1 kHz (chuẩn CD)
                '-ac', '2',  # Số kênh âm thanh (stereo)
                audio_path  # Đường dẫn đầu ra file âm thanh
            ]

            # Thực thi lệnh ffmpeg với subprocess và ẩn cửa sổ CMD
            subprocess.Popen(command_audio, creationflags=subprocess.CREATE_NO_WINDOW)        
        except Exception as e:
            open("log.txt", "a").write(f"Lỗi khi trích xuất khung hình và âm thanh: {e}\n")
            return None
    def task():
        subfolders = [f.path for f in os.scandir(video_path) if f.is_file() and f.path.endswith('.mp4')]
        print(subfolders)
        for i in subfolders:
            run(i)
    t = threading.Thread(target=task)
    t.start()

# Hàm tạo video mới từ các khung hình và giữ âm thanh gốc
def create_video_from_frames(frame_dir, interval, output_video, luong, ffmpeg_bin, progress_callback):
    def run(frame_dir):
        try:
            os.makedirs("result", exist_ok=True)
            video_key = hash_video_name(os.path.basename(frame_dir))
            audio_path = os.path.join(frame_dir, "audio.wav")
            video_name = os.path.basename(frame_dir).split('.')[0]
            result_video = f"result/{video_name}.mp4"
            transitions = [
                "fade", "wipeleft", "wiperight", "wipeup", "wipedown",
                "slideleft", "slideright", "slideup", "slidedown", "circlecrop"
            ]

            images = sorted([os.path.join(frame_dir, f) for f in os.listdir(frame_dir) if f.endswith(".png")])

            if len(images) < 2:
                raise Exception("Cần ít nhất 2 ảnh để tạo video.")

            temp_videos = []
            
            # Tạo video tạm thời cho từng cặp ảnh và hiệu ứng chuyển cảnh giữa chúng
            for i in range(len(images) - 1):
                temp_video = os.path.join(frame_dir, f"temp_{i}.mp4")
                effect = transitions[sum(ord(c) for c in str(id(transitions))) % len(transitions)]

                # Lệnh để tạo video tạm thời cho từng cặp ảnh với hiệu ứng chuyển cảnh
                command = [
                    os.path.join(ffmpeg_bin, 'ffmpeg'),
                    '-y',
                    '-loop', '1', '-t', str(interval), '-i', images[i],
                    '-loop', '1', '-t', str(interval), '-i', images[i + 1],
                    '-filter_complex', f"[0:v][1:v]xfade=transition={effect}:duration=1.0:offset=0[v]",
                    '-map', '[v]',
                    '-c:v', 'libx264', '-pix_fmt', 'yuv420p',
                    temp_video
                ]

                ff = FfmpegProgress(command)
                for progress in ff.run_command_with_progress():
                    progress_callback(video_key, progress / len(images))

                temp_videos.append(temp_video)

            # Kiểm tra file tạm thời và tạo concat_list.txt
            concat_list_file = os.path.join(frame_dir, "concat_list.txt")
            with open(concat_list_file, "w") as f:
                for temp_video in temp_videos:
                    f.write(f"file '{os.path.abspath(temp_video)}'\n")

            # Lệnh FFmpeg để ghép nối video cuối cùng
            final_command = [
                os.path.join(ffmpeg_bin, 'ffmpeg'),
                '-y',
                '-f', 'concat', '-safe', '0', '-i', concat_list_file,
                '-i', audio_path,
                '-c:v', 'libx264', '-c:a', 'aac', '-b:a', '192k',
                result_video
            ]

            ff = FfmpegProgress(final_command)
            for progress in ff.run_command_with_progress():
                progress_callback(video_key, progress / 100)
        except Exception as e:
            tb = e.__traceback__
            error_message = f"Exception: {e} | "
            while tb is not None:
                filename = tb.tb_frame.f_code.co_filename
                lineno = tb.tb_lineno
                function_name = tb.tb_frame.f_code.co_name
                error_message += f"File: {filename}, Line: {lineno}, in {function_name}\n"
                tb = tb.tb_next
            open("log.txt", "a").write(f"{error_message}\n")
            messagebox.showerror("Error", f"Lỗi khi tạo video với hiệu ứng: {e}")
    def task():
        subfolders = [f.path for f in os.scandir(frame_dir) if f.is_dir()]
        for i in range(0, len(subfolders), int(luong)):
            aaa = subfolders[i:i + int(luong)]
            threads = []
            for j in aaa:
                t = threading.Thread(target=run, args=(j,))
                threads.append(t)
            for t in threads:
                t.start()
    t = threading.Thread(target=task)
    t.start()



# Hàm cập nhật tiến trình
def update_progress(video_key,value):
    extract_progress[video_key] = value
    total_progress = sum(extract_progress.values()) / len(extract_progress)
    progress_bar.set(total_progress)
    progress_label.configure(text=f"Tiến trình tổng: {int(total_progress * 100)}%")
def update_progress_combine(video_key,value):
    video_progress[video_key] = value
    total_progress = sum(video_progress.values()) / len(video_progress)
    progress_bar_combine.set(total_progress)
    progress_label_combine.configure(text=f"Tiến trình tổng: {int(total_progress * 100)}%")

# Hàm chọn đường dẫn ffmpeg
def choose_ffmpeg_path():
    global ffmpeg_bin_path
    path = filedialog.askdirectory(title="Chọn đường dẫn đến ffmpeg/bin")
    if path:
        ffmpeg_bin_path = path
        ffmpeg_path_entry.delete(0, ctk.END)
        ffmpeg_path_entry.insert(0, path)
        if not os.path.exists(os.path.join(ffmpeg_bin_path, 'ffmpeg.exe')):
            messagebox.showerror("Error", "Đường dẫn FFmpeg không hợp lệ!")
        else:
            messagebox.showinfo("Success", "Đường dẫn FFmpeg đã được cập nhật.")

# Hàm chọn file video
def choose_file(entry_widget):
    file_path = filedialog.askopenfilename(filetypes=[("MP4 files", "*.mp4")])
    if file_path:
        entry_widget.delete(0, ctk.END)
        entry_widget.insert(0, file_path)

# Hàm chọn thư mục
def choose_folder(entry_widget):
    folder_path = filedialog.askdirectory()
    if folder_path:
        entry_widget.delete(0, ctk.END)
        entry_widget.insert(0, folder_path)

# Giao diện CustomTkinter với hai tab
app = ctk.CTk()
app.title("Quản lý Video với FFmpeg")
app.geometry("600x500")

# Biến lưu đường dẫn ffmpeg
ffmpeg_bin_path = "./ffmpeg/bin"

# Nhập đường dẫn FFmpeg chung
ctk.CTkLabel(app, text="Đường dẫn FFmpeg").pack(pady=5)
ffmpeg_path_frame = ctk.CTkFrame(app)
ffmpeg_path_frame.pack(pady=5, padx=10, fill="x")

ffmpeg_path_entry = ctk.CTkEntry(ffmpeg_path_frame, placeholder_text="Nhập đường dẫn ffmpeg/bin", width=450)
ffmpeg_path_entry.pack(side="left", padx=5, pady=5)
ffmpeg_path_button = ctk.CTkButton(ffmpeg_path_frame, text="Chọn", command=choose_ffmpeg_path)
ffmpeg_path_button.pack(side="left", padx=5)

# Tạo tab view
tab_view = ctk.CTkTabview(app, width=500, height=400)
tab_view.pack(pady=10, padx=10, fill="both", expand=True)

# Tab 1: Tách ảnh và âm thanh
tab_extract = tab_view.add("Tách ảnh & Âm thanh")

ctk.CTkLabel(tab_extract, text="Chọn video MP4").pack(pady=10)
video_path_entry = ctk.CTkEntry(tab_extract, placeholder_text="Đường dẫn video", width=400)
video_path_entry.pack(pady=5)
video_button = ctk.CTkButton(tab_extract, text="Chọn folder Video", command=lambda: choose_folder(video_path_entry))
video_button.pack(pady=5)

interval_entry = ctk.CTkEntry(tab_extract, placeholder_text="Khoảng thời gian (giây)", width=200)
interval_entry.pack(pady=5)

output_extract_button = ctk.CTkButton(tab_extract, text="Chạy Tách", command=lambda: extract_frames(
    video_path_entry.get(), float(interval_entry.get()), "frames", update_progress, ffmpeg_bin_path
))
output_extract_button.pack(pady=20)

# Thanh tiến trình cho tab 1
ctk.CTkLabel(tab_extract, text="Tiến trình").pack(pady=10)
progress_bar = ctk.CTkProgressBar(tab_extract, width=400)
progress_bar.pack(pady=5)
progress_bar.set(0)

progress_label = ctk.CTkLabel(tab_extract, text="0%")
progress_label.pack()

# Tab 2: Ghép ảnh và âm thanh
tab_combine = tab_view.add("Ghép ảnh & Âm Thanh")

frames_dir_entry = ctk.CTkEntry(tab_combine, placeholder_text="Thư mục ảnh", width=400)
frames_dir_entry.pack(pady=5)
frames_button = ctk.CTkButton(tab_combine, text="Chọn Thư Mục", command=lambda: choose_folder(frames_dir_entry))
frames_button.pack(pady=5)

audio_file_entry = ctk.CTkEntry(tab_combine, placeholder_text="Nhập số luồng", width=400)
audio_file_entry.pack(pady=5)
interval_entry_combine = ctk.CTkEntry(tab_combine, placeholder_text="Khoảng thời gian (giây)", width=200)
interval_entry_combine.pack(pady=5)

output_combine_button = ctk.CTkButton(tab_combine, text="Chạy Ghép", command=lambda: create_video_from_frames(
    frames_dir_entry.get(), int(interval_entry_combine.get()), "results", audio_file_entry.get(), ffmpeg_bin_path, update_progress_combine
))
output_combine_button.pack(pady=20)

# Thanh tiến trình cho tab 2
ctk.CTkLabel(tab_combine, text="Tiến trình").pack(pady=10)
progress_bar_combine = ctk.CTkProgressBar(tab_combine, width=400)
progress_bar_combine.pack(pady=5)
progress_bar_combine.set(0)

progress_label_combine = ctk.CTkLabel(tab_combine, text="0%")
progress_label_combine.pack()

app.mainloop()
